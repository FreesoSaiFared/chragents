# AI Chat Panel

This panel is a Multi-Agent Framework that allows a user to connect an existing LLM with the chromium browser.

### Steps to run project

1.  Setup the `depot_tools` to fetch the chromium dev tools. It's recommended to clone `depot_tools` into your home directory (e.g., `/home/ned/depot_tools`).
    ```sh
    # Clone depot_tools (if you haven't already)
    # It's good practice to place it in a common location, e.g., /home/ned/depot_tools
    git clone [https://chromium.googlesource.com/chromium/tools/depot_tools.git](https://chromium.googlesource.com/chromium/tools/depot_tools.git) /home/ned/depot_tools
    
    # Add depot_tools to your PATH for the current session
    # For persistent access, add this line to your ~/.bashrc or ~/.zshrc
    export PATH="$PATH:/home/ned/depot_tools"
    ```
    *For more details, see the official [Chromium depot_tools setup guide](https://www.chromium.org/developers/how-tos/get-the-code/).*

2.  Follow these instructions to set up the DevTools frontend code. We'll assume you're creating a `devtools` directory in your home directory.
    ```sh
    # Create a directory for your DevTools development and navigate into it
    mkdir -p /home/ned/devtools
    cd /home/ned/devtools
    
    # Fetch the DevTools frontend code
    fetch devtools-frontend
    
    # Navigate into the DevTools frontend directory
    cd devtools-frontend
    
    # Synchronize dependencies
    gclient sync
    
    # Build the DevTools frontend
    npm run build
    ```
    *For more details, see the [DevTools frontend setup guide](https://chromium.googlesource.com/devtools/devtools-frontend/+/main/docs/get_the_code.md).*

3.  Update the code to the specified fork implementation:
    ```sh
    # Ensure you are in the devtools-frontend directory: /home/ned/devtools/devtools-frontend
    cd /home/ned/devtools/devtools-frontend

    git remote add upstream git@github.com:tysonthomas9/browser-operator-devtools-frontend.git
    git checkout upstream/main
    ```

4.  Build and serve the modified DevTools frontend:
    ```sh
    # Ensure you are in the devtools-frontend directory: /home/ned/devtools/devtools-frontend
    cd /home/ned/devtools/devtools-frontend
    
    # Build the project
    npm run build
    
    # Serve the built DevTools from the 'out/Default/gen/front_end' directory
    # This command needs to be run from the devtools-frontend directory
    # The server will typically run on http://localhost:8000
    python3 -m http.server --directory out/Default/gen/front_end
    ```
    *Note: The original instructions had `python -m http.server`. On Ubuntu 24.04, `python3` should be used explicitly. The `--directory` flag is added for clarity if `python3 -m http.server` is run from the `devtools-frontend` root.*
    *Alternatively, you can `cd out/Default/gen/front_end` and then run `python3 -m http.server`.*

5.  Run a Chrome or Chromium Browser instance with your custom DevTools frontend:
    ```sh
    # The path to the bundled Chrome/Chromium for testing DevTools might be:
    # /home/ned/devtools/devtools-frontend/third_party/chrome/chrome-linux/chrome
    # Replace this with the actual path to your Chromium or Chrome executable if different,
    # or if the bundled one is not available/preferred.
    
    # Example using the assumed bundled Chrome:
    /home/ned/devtools/devtools-frontend/third_party/chrome/chrome-linux/chrome --disable-infobars --custom-devtools-frontend=http://localhost:8000/
    
    # If you are using your system-installed Chromium:
    # chromium-browser --disable-infobars --custom-devtools-frontend=http://localhost:8000/
    
    # If you are using your system-installed Google Chrome:
    # google-chrome --disable-infobars --custom-devtools-frontend=http://localhost:8000/
    ```
    *Ensure the path to the Chrome/Chromium executable is correct for your system. The `chrome-linux` path is based on the original guide's structure; verify its existence after `gclient sync`.*

### Setup and Development

1.  Build the project and use watch mode for automatic rebuilding on changes:
    ```sh
    # Ensure you are in the devtools-frontend directory: /home/ned/devtools/devtools-frontend
    cd /home/ned/devtools/devtools-frontend
    
    npm run build -- --watch
    ```

2.  Serve the content of `out/Default/gen/front_end` on a web server. In a separate terminal, navigate to the `devtools-frontend` directory and run:
    ```sh
    # Ensure you are in the devtools-frontend directory: /home/ned/devtools/devtools-frontend
    cd /home/ned/devtools/devtools-frontend
    
    # Serve the built DevTools (assuming it's already built by the --watch command)
    python3 -m http.server --directory out/Default/gen/front_end
    ```
    *Alternatively, if you prefer to `cd` into the directory first:*
    ```sh
    # cd /home/ned/devtools/devtools-frontend/out/Default/gen/front_end
    # python3 -m http.server
    ```

3.  Use the AI Chat panel by launching Chrome/Chromium with the custom DevTools flag, pointing to your local server (e.g., `http://localhost:8000/` if that's where your server from step 2 is running):
    ```sh
    # Example using the assumed bundled Chrome:
    /home/ned/devtools/devtools-frontend/third_party/chrome/chrome-linux/chrome --disable-infobars --custom-devtools-frontend=http://localhost:8000/

    # Or using your system-installed Chromium:
    # chromium-browser --disable-infobars --custom-devtools-frontend=http://localhost:8000/
    ```

### Agent Architecture

The AI Chat Panel uses the multi-agent framework with the following components:

1.  **State Management**: Tracks conversation history, user context, and DevTools state
2.  **Tools**: Provides capabilities for DOM inspection, network analysis, and code execution
3.  **Workflow**: Defines the agent's reasoning process and decision-making flow

## Reference
https://chromium.googlesource.com/devtools/devtools-frontend/+/main/docs/get_the_code.md#Standalone-checkout-Checking-out-source
